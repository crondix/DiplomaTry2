@page "/PrinterNameVerification"
@using DiplomaModels
@using System.Net.Http.Json
@using System.Text.Json
@using DiplomaTry2.Data
@using Microsoft.EntityFrameworkCore

 @inject PrintServerService printServerService
 @inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IConfiguration appConfig
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

@rendermode RenderMode.InteractiveServer

<h3>Printer Name Verification @if (IsAdditionSuccessful is not null)
    {
        <span class="@(IsAdditionSuccessful??false?"bg-success":"bg-warning")">@(IsAdditionSuccessful ?? false ? "Добавление выполнено успешно" : $" Произошла ошибка: {AdditionErrorMessage}") </span>
    }
</h3>
<div class="row">
    <div class="col-6">
        <div class="position-relative">
        @if (PrinterModelsFromPrintServer is not null)
        {

            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th class="align-content-center">DriverName</th>
                        <th class="d-flex justify-content-between align-content-center"><span class="align-content-center">Is Model Driver</span>  <button class="btn btn-secondary" @onclick="TogleChoseAll">Выделить все</button></th>


                    </tr>
                </thead>
                <tbody>
                    @foreach (var printer in PrinterModelsFromPrintServer)
                    { 
                            <tr>
                                <td class="align-content-center">@printer.ModelName</td>
                            <td class="align-content-center"><input type="checkbox" name="name" @onchange="((e) => HandleCheckboxChange(printer, e))" checked="@SelectedPrinters.Contains(printer)" /></td>
                            </tr>
                        
                    }
                </tbody>
            </table>
               
        }
        else if (!Loading)
        {
            <div class="">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th class="w-50">DriverName</th>
                        <th class="w-50">Is Model Driver</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="2"><div class="w-100 d-flex justify-content-center p-8"><button class="btn btn-primary" @onclick="LoadData">Get Data</button></div></td>
                    </tr>

                </tbody>
            </table>
              
            </div>
        }
        else
        {
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>DriverName</th>
                        <th>Is Model Driver</th>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <td class="align-content-center  placeholder-glow"><span class="placeholder col-6"></span></td>
                        <td class="align-content-center placeholder-glow "><span class="placeholder col-6"></span></td>
                    </tr>
                    <tr>
                        <td class="align-content-center  placeholder-glow "><span class="placeholder col-6"></span></td>
                        <td class="align-content-center  placeholder-glow"><span class="placeholder col-6"></span></td>
                    </tr>
                    <tr>
                        <td class="align-content-center  placeholder-glow "><span class="placeholder col-6"></span></td>
                        <td class="align-content-center placeholder-glow "><span class="placeholder col-6"></span></td>
                    </tr>
                </tbody>
            </table>

        }
            @if (Adding)
            {
                <div class="position-absolute top-0 bottom-0 start-0 end-0 mt-0  bg-dark opacity-25 d-flex justify-content-center align-content-center">
                </div>
            }
    </div>
      
    </div>

    <div class="col-6">
        <div class="position-relative">
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>DriverName</th>
                </tr>
            </thead>
            <tbody>
                @if (SelectedPrinters.Count==0)
                {
                    <tr>
                        <td class="align-content-center   "><span class=" col-12"></span></td>
                   
                    </tr>
                }
                else
                {
                    @foreach (var printer in SelectedPrinters)
                    {
                        <tr>
                            <td class="align-content-center">@printer.ModelName</td>
                        </tr>
                    }
                }
                
            </tbody>
        </table>
        @if (Adding)
        {
            <div class="position-absolute top-0 bottom-0 start-0 end-0 mt-0  bg-dark opacity-25 d-flex justify-content-center align-content-center">
            </div>
        }
        </div>
        <button class="btn btn-primary" @onclick="AddDB">Add to DB</button>
    </div>
</div>




@code {
    List<PrinterModel>? PrinterModelsFromPrintServer;
    List<PrinterModel>? PrinterModelsFromBD;
    string? message;
    bool Loading = false;
    bool Adding = false;
    bool IsCheked = false;
    bool? IsAdditionSuccessful;
    string AdditionErrorMessage="";
    List<PrinterModel> SelectedPrinters = new List<PrinterModel>();


    private void HandleCheckboxChange(PrinterModel printer, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!SelectedPrinters.Contains(printer))
            {
                SelectedPrinters.Add(printer);
            }
        }
        else
        {
            if (SelectedPrinters.Contains(printer))
            {
                SelectedPrinters.Remove(printer);
            }
        }

    }



    void TogleChoseAll()
    {
        IsCheked = !IsCheked;
        if (IsCheked)
        {
            // Выделить все
            SelectedPrinters = new List<PrinterModel>(PrinterModelsFromPrintServer);
        }
        else
        {
            // Снять выделение со всех
            SelectedPrinters.Clear();
        }
    }
    async Task AddDB()
    {
        try
        {
            Adding = true;
            await using var DbContext = DbContextFactory.CreateDbContext();
            DbContext.PrinterModels.AddRange(SelectedPrinters);

            DbContext.SaveChanges();
            Adding = false;
            SelectedPrinters = new List<PrinterModel>();
            PrinterModelsFromPrintServer = null;
            Loading = !Loading;
            IsAdditionSuccessful = true;
        }
        catch (Exception e)
        {
            IsAdditionSuccessful = false;
            AdditionErrorMessage = e?.InnerException?.Message??"";
        }
       
    }

    async Task LoadData()
    {
        Loading = true;

        try
        {
            PrinterModelsFromPrintServer = await printServerService.GetPrintersModelsListAsync(@"\\vm-print");
            await using var DbContext = DbContextFactory.CreateDbContext();
            PrinterModelsFromBD = DbContext.PrinterModels.ToList();
            foreach (var printer in PrinterModelsFromPrintServer.ToList())
            {
                if (PrinterModelsFromBD?.FirstOrDefault(p => p?.NormalizedModelName == printer?.NormalizedModelName) is not null)
                {
                    PrinterModelsFromPrintServer.Remove(printer); // Указываем конкретный элемент для удаления
                }
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine($"Ошибка загрузки данных с принт сервера : \n{e.Message}");
        }


    }
    async Task LoadDataHTTP()
    {
        Loading = true;
        var response = await httpClient.GetAsync("/printerModelsList");


        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            PrinterModelsFromPrintServer = JsonSerializer.Deserialize<List<PrinterModel>>(result);
        }
        else
        {
            var error = await response.Content.ReadFromJsonAsync<Error>();
            if (error != null) message = error.Details;
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }
    class Error
    {
        public string Details { get; set; } = "";
    }
}
